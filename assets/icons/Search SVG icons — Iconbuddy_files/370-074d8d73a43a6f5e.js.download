"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[370],{92370:function(e,r,t){t.d(r,{x:function(){return ec}});var a={};t.r(a),t.d(a,{abtestingClient:function(){return U},apiClientVersion:function(){return k}});var i={};t.r(i),t.d(i,{analyticsClient:function(){return O},apiClientVersion:function(){return A}});var o={};t.r(o),t.d(o,{apiClientVersion:function(){return j},insightsClient:function(){return K}});var s={};t.r(s),t.d(s,{apiClientVersion:function(){return B},personalizationClient:function(){return H}});var n={};t.r(n),t.d(n,{apiClientVersion:function(){return Q},querySuggestionsClient:function(){return L}});var d={};t.r(d),t.d(d,{apiClientVersion:function(){return V},searchClient:function(){return z}});var l={};t.r(l),t.d(l,{apiClientVersion:function(){return F},ingestionClient:function(){return Y},isOnDemandTrigger:function(){return J},isScheduleTrigger:function(){return _},isSubscriptionTrigger:function(){return X}});var u={};t.r(u),t.d(u,{apiClientVersion:function(){return Z},monitoringClient:function(){return ee}});var h={};function c(){return{send:function(e){return new Promise(r=>{let t=new XMLHttpRequest;t.open(e.method,e.url,!0),Object.keys(e.headers).forEach(r=>t.setRequestHeader(r,e.headers[r]));let a=(e,a)=>setTimeout(()=>{t.abort(),r({status:0,content:a,isTimedOut:!0})},e),i=a(e.connectTimeout,"Connection timeout"),o;t.onreadystatechange=()=>{t.readyState>t.OPENED&&void 0===o&&(clearTimeout(i),o=a(e.responseTimeout,"Socket timeout"))},t.onerror=()=>{0===t.status&&(clearTimeout(i),clearTimeout(o),r({content:t.responseText||"Network request failed",status:t.status,isTimedOut:!1}))},t.onload=()=>{clearTimeout(i),clearTimeout(o),r({content:t.responseText,status:t.status,isTimedOut:!1})},t.send(e.data)})}}}function m(e){let r;let t=`algolia-client-js-${e.key}`;function a(){return void 0===r&&(r=e.localStorage||window.localStorage),r}function i(){return JSON.parse(a().getItem(t)||"{}")}function o(e){a().setItem(t,JSON.stringify(e))}return{get:(r,t,a={miss:()=>Promise.resolve()})=>Promise.resolve().then(()=>(!function(){let r=e.timeToLive?1e3*e.timeToLive:null,t=Object.fromEntries(Object.entries(i()).filter(([,e])=>void 0!==e.timestamp));o(t),r&&o(Object.fromEntries(Object.entries(t).filter(([,e])=>{let t=new Date().getTime();return!(e.timestamp+r<t)})))}(),i()[JSON.stringify(r)])).then(e=>Promise.all([e?e.value:t(),void 0!==e])).then(([e,r])=>Promise.all([e,r||a.miss(e)])).then(([e])=>e),set:(e,r)=>Promise.resolve().then(()=>{let o=i();return o[JSON.stringify(e)]={timestamp:new Date().getTime(),value:r},a().setItem(t,JSON.stringify(o)),r}),delete:e=>Promise.resolve().then(()=>{let r=i();delete r[JSON.stringify(e)],a().setItem(t,JSON.stringify(r))}),clear:()=>Promise.resolve().then(()=>{a().removeItem(t)})}}function p(e){let r=[...e.caches],t=r.shift();return void 0===t?{get:(e,r,t={miss:()=>Promise.resolve()})=>r().then(e=>Promise.all([e,t.miss(e)])).then(([e])=>e),set:(e,r)=>Promise.resolve(r),delete:e=>Promise.resolve(),clear:()=>Promise.resolve()}:{get:(e,a,i={miss:()=>Promise.resolve()})=>t.get(e,a,i).catch(()=>p({caches:r}).get(e,a,i)),set:(e,a)=>t.set(e,a).catch(()=>p({caches:r}).set(e,a)),delete:e=>t.delete(e).catch(()=>p({caches:r}).delete(e)),clear:()=>t.clear().catch(()=>p({caches:r}).clear())}}function g(e={serializable:!0}){let r={};return{get(t,a,i={miss:()=>Promise.resolve()}){let o=JSON.stringify(t);if(o in r)return Promise.resolve(e.serializable?JSON.parse(r[o]):r[o]);let s=a();return s.then(e=>i.miss(e)).then(()=>s)},set:(t,a)=>(r[JSON.stringify(t)]=e.serializable?JSON.stringify(a):a,Promise.resolve(a)),delete:e=>(delete r[JSON.stringify(e)],Promise.resolve()),clear:()=>(r={},Promise.resolve())}}function P(e,r,t="WithinHeaders"){let a={"x-algolia-api-key":r,"x-algolia-application-id":e};return{headers:()=>"WithinHeaders"===t?a:{},queryParameters:()=>"WithinQueryParameters"===t?a:{}}}function q({func:e,validate:r,aggregator:t,error:a,timeout:i=()=>0}){let o=s=>new Promise((n,d)=>{e(s).then(async e=>(t&&await t(e),await r(e))?n(e):a&&await a.validate(e)?d(Error(await a.message(e))):setTimeout(()=>{o(e).then(n).catch(d)},await i())).catch(e=>{d(e)})});return o()}function w({algoliaAgents:e,client:r,version:t}){let a=(function(e){let r={value:`Algolia for JavaScript (${e})`,add(e){let t=`; ${e.segment}${void 0!==e.version?` (${e.version})`:""}`;return -1===r.value.indexOf(t)&&(r.value=`${r.value}${t}`),r}};return r})(t).add({segment:r,version:t});return e.forEach(e=>a.add(e)),a}function f(){return{debug:(e,r)=>Promise.resolve(),info:(e,r)=>Promise.resolve(),error:(e,r)=>Promise.resolve()}}function y(e,r="up"){let t=Date.now();return{...e,status:r,lastUpdate:t,isUp:function(){return"up"===r||Date.now()-t>12e4},isTimedOut:function(){return"timed out"===r&&Date.now()-t<=12e4}}}t.r(h),t.d(h,{apiClientVersion:function(){return er},recommendClient:function(){return et}});var E=class extends Error{name="AlgoliaError";constructor(e,r){super(e),r&&(this.name=r)}},T=class extends E{stackTrace;constructor(e,r,t){super(e,t),this.stackTrace=r}},I=class extends T{constructor(e){super("Unreachable hosts - your application id may be incorrect. If the error persists, please reach out to the Algolia Support team: https://alg.li/support.",e,"RetryError")}},S=class extends T{status;constructor(e,r,t,a="ApiError"){super(e,t,a),this.status=r}},v=class extends E{response;constructor(e,r){super(e,"DeserializationError"),this.response=r}},D=class extends S{error;constructor(e,r,t,a){super(e,r,a,"DetailedApiError"),this.error=t}};function x(e){for(let r=e.length-1;r>0;r--){let t=Math.floor(Math.random()*(r+1)),a=e[r];e[r]=e[t],e[t]=a}return e}function b(e){let r=e.request.headers["x-algolia-api-key"]?{"x-algolia-api-key":"*****"}:{};return{...e,request:{...e.request,headers:{...e.request.headers,...r}}}}function C({hosts:e,hostsCache:r,baseHeaders:t,logger:a,baseQueryParameters:i,algoliaAgent:o,timeouts:s,requester:n,requestsCache:d,responsesCache:l}){async function u(e){let t=await Promise.all(e.map(e=>r.get(e,()=>Promise.resolve(y(e))))),a=t.filter(e=>e.isUp()),i=t.filter(e=>e.isTimedOut()),o=[...a,...i];return{hosts:o.length>0?o:e,getTimeout:(e,r)=>(0===i.length&&0===e?1:i.length+3+e)*r}}async function h(d,l,h=!0){let c=[],m=function(e,r){if("GET"!==e.method&&(void 0!==e.data||void 0!==r.data))return JSON.stringify(Array.isArray(e.data)?e.data:{...e.data,...r.data})}(d,l),p=function(e,r,t){let a={Accept:"application/json",...e,...r,...t},i={};return Object.keys(a).forEach(e=>{let r=a[e];i[e.toLowerCase()]=r}),i}(t,d.headers,l.headers),g="GET"===d.method?{...d.data,...l.data}:{},P={...i,...d.queryParameters,...g};if(o.value&&(P["x-algolia-agent"]=o.value),l&&l.queryParameters)for(let e of Object.keys(l.queryParameters))l.queryParameters[e]&&"[object Object]"!==Object.prototype.toString.call(l.queryParameters[e])?P[e]=l.queryParameters[e].toString():P[e]=l.queryParameters[e];let q=0,w=async(e,t)=>{let i=e.pop();if(void 0===i)throw new I(c.map(e=>b(e)));let o={...s,...l.timeouts},u={data:m,headers:p,method:d.method,url:function(e,r,t){let a=Object.keys(t).filter(e=>void 0!==t[e]).sort().map(e=>`${e}=${encodeURIComponent("[object Array]"===Object.prototype.toString.call(t[e])?t[e].join(","):t[e]).replace(/\+/g,"%20")}`).join("&"),i=`${e.protocol}://${e.url}${e.port?`:${e.port}`:""}/${"/"===r.charAt(0)?r.substring(1):r}`;return a.length&&(i+=`?${a}`),i}(i,d.path,P),connectTimeout:t(q,o.connect),responseTimeout:t(q,h?o.read:o.write)},g=r=>{let t={request:u,response:r,host:i,triesLeft:e.length};return c.push(t),t},f=await n.send(u);if(function({isTimedOut:e,status:r}){return e||function({isTimedOut:e,status:r}){return!e&&0==~~r}({isTimedOut:e,status:r})||2!=~~(r/100)&&4!=~~(r/100)}(f)){let o=g(f);return f.isTimedOut&&q++,a.info("Retryable failure",b(o)),await r.set(i,y(i,f.isTimedOut?"timed out":"down")),w(e,t)}if(function({status:e}){return 2==~~(e/100)}(f))return function(e){try{return JSON.parse(e.content)}catch(r){throw new v(r.message,e)}}(f);throw g(f),function({content:e,status:r},t){try{let a=JSON.parse(e);if("error"in a)return new D(a.message,r,a.error,t);return new S(a.message,r,t)}catch{}return new S(e,r,t)}(f,c)},f=e.filter(e=>"readWrite"===e.accept||(h?"read"===e.accept:"write"===e.accept)),E=await u(f);return w([...E.hosts].reverse(),E.getTimeout)}return{hostsCache:r,requester:n,timeouts:s,logger:a,algoliaAgent:o,baseHeaders:t,baseQueryParameters:i,hosts:e,request:function(e,r={}){let a=e.useReadTransporter||"GET"===e.method;if(!a)return h(e,r,a);let o=()=>h(e,r);if(!0!==(r.cacheable||e.cacheable))return o();let s={request:e,requestOptions:r,transporter:{queryParameters:i,headers:t}};return l.get(s,()=>d.get(s,()=>d.set(s,o()).then(e=>Promise.all([d.delete(s),e]),e=>Promise.all([d.delete(s),Promise.reject(e)])).then(([e,r])=>r)),{miss:e=>l.set(s,e)})},requestsCache:d,responsesCache:l}}var k="5.23.3",R=["de","us"];function U(e,r,t,a){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");if(t&&("string"!=typeof t||!R.includes(t)))throw Error(`\`region\` must be one of the following: ${R.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...o}){let s=P(e,r,t),n=C({hosts:[{url:i?"analytics.{region}.algolia.com".replace("{region}",i):"analytics.algolia.com",accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:a,client:"Abtesting",version:k}),baseHeaders:{"content-type":"text/plain",...s.headers(),...o.baseHeaders},baseQueryParameters:{...s.queryParameters(),...o.baseQueryParameters}});return{transporter:n,appId:e,apiKey:r,clearCache:()=>Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>void 0),get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},addABTests(e,r){if(!e)throw Error("Parameter `addABTestsRequest` is required when calling `addABTests`.");if(!e.name)throw Error("Parameter `addABTestsRequest.name` is required when calling `addABTests`.");if(!e.variants)throw Error("Parameter `addABTestsRequest.variants` is required when calling `addABTests`.");if(!e.endAt)throw Error("Parameter `addABTestsRequest.endAt` is required when calling `addABTests`.");return n.request({method:"POST",path:"/2/abtests",queryParameters:{},headers:{},data:e},r)},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return n.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return n.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return n.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return n.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},deleteABTest({id:e},r){if(!e)throw Error("Parameter `id` is required when calling `deleteABTest`.");let t="/2/abtests/{id}".replace("{id}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},estimateABTest(e,r){if(!e)throw Error("Parameter `estimateABTestRequest` is required when calling `estimateABTest`.");if(!e.configuration)throw Error("Parameter `estimateABTestRequest.configuration` is required when calling `estimateABTest`.");if(!e.variants)throw Error("Parameter `estimateABTestRequest.variants` is required when calling `estimateABTest`.");return n.request({method:"POST",path:"/2/abtests/estimate",queryParameters:{},headers:{},data:e},r)},getABTest({id:e},r){if(!e)throw Error("Parameter `id` is required when calling `getABTest`.");let t="/2/abtests/{id}".replace("{id}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},listABTests({offset:e,limit:r,indexPrefix:t,indexSuffix:a}={},i){let o={};return void 0!==e&&(o.offset=e.toString()),void 0!==r&&(o.limit=r.toString()),void 0!==t&&(o.indexPrefix=t.toString()),void 0!==a&&(o.indexSuffix=a.toString()),n.request({method:"GET",path:"/2/abtests",queryParameters:o,headers:{}},i)},scheduleABTest(e,r){if(!e)throw Error("Parameter `scheduleABTestsRequest` is required when calling `scheduleABTest`.");if(!e.name)throw Error("Parameter `scheduleABTestsRequest.name` is required when calling `scheduleABTest`.");if(!e.variants)throw Error("Parameter `scheduleABTestsRequest.variants` is required when calling `scheduleABTest`.");if(!e.scheduledAt)throw Error("Parameter `scheduleABTestsRequest.scheduledAt` is required when calling `scheduleABTest`.");if(!e.endAt)throw Error("Parameter `scheduleABTestsRequest.endAt` is required when calling `scheduleABTest`.");return n.request({method:"POST",path:"/2/abtests/schedule",queryParameters:{},headers:{},data:e},r)},stopABTest({id:e},r){if(!e)throw Error("Parameter `id` is required when calling `stopABTest`.");let t="/2/abtests/{id}/stop".replace("{id}",encodeURIComponent(e));return n.request({method:"POST",path:t,queryParameters:{},headers:{}},r)}}}({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${k}-${e}`}),g()]}),...a})}var A="5.23.3",N=["de","us"];function O(e,r,t,a){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");if(t&&("string"!=typeof t||!N.includes(t)))throw Error(`\`region\` must be one of the following: ${N.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...o}){let s=P(e,r,t),n=C({hosts:[{url:i?"analytics.{region}.algolia.com".replace("{region}",i):"analytics.algolia.com",accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:a,client:"Analytics",version:A}),baseHeaders:{"content-type":"text/plain",...s.headers(),...o.baseHeaders},baseQueryParameters:{...s.queryParameters(),...o.baseQueryParameters}});return{transporter:n,appId:e,apiKey:r,clearCache:()=>Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>void 0),get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return n.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return n.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return n.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return n.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},getAddToCartRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getAddToCartRate`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/conversions/addToCartRate",queryParameters:o,headers:{}},i)},getAverageClickPosition({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getAverageClickPosition`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/clicks/averageClickPosition",queryParameters:o,headers:{}},i)},getClickPositions({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getClickPositions`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/clicks/positions",queryParameters:o,headers:{}},i)},getClickThroughRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getClickThroughRate`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/clicks/clickThroughRate",queryParameters:o,headers:{}},i)},getConversionRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getConversionRate`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/conversions/conversionRate",queryParameters:o,headers:{}},i)},getNoClickRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getNoClickRate`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/searches/noClickRate",queryParameters:o,headers:{}},i)},getNoResultsRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getNoResultsRate`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/searches/noResultRate",queryParameters:o,headers:{}},i)},getPurchaseRate({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getPurchaseRate`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/conversions/purchaseRate",queryParameters:o,headers:{}},i)},getRevenue({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getRevenue`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/conversions/revenue",queryParameters:o,headers:{}},i)},getSearchesCount({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getSearchesCount`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/searches/count",queryParameters:o,headers:{}},i)},getSearchesNoClicks({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:o},s){if(!e)throw Error("Parameter `index` is required when calling `getSearchesNoClicks`.");let d={};return void 0!==e&&(d.index=e.toString()),void 0!==r&&(d.startDate=r.toString()),void 0!==t&&(d.endDate=t.toString()),void 0!==a&&(d.limit=a.toString()),void 0!==i&&(d.offset=i.toString()),void 0!==o&&(d.tags=o.toString()),n.request({method:"GET",path:"/2/searches/noClicks",queryParameters:d,headers:{}},s)},getSearchesNoResults({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:o},s){if(!e)throw Error("Parameter `index` is required when calling `getSearchesNoResults`.");let d={};return void 0!==e&&(d.index=e.toString()),void 0!==r&&(d.startDate=r.toString()),void 0!==t&&(d.endDate=t.toString()),void 0!==a&&(d.limit=a.toString()),void 0!==i&&(d.offset=i.toString()),void 0!==o&&(d.tags=o.toString()),n.request({method:"GET",path:"/2/searches/noResults",queryParameters:d,headers:{}},s)},getStatus({index:e},r){if(!e)throw Error("Parameter `index` is required when calling `getStatus`.");let t={};return void 0!==e&&(t.index=e.toString()),n.request({method:"GET",path:"/2/status",queryParameters:t,headers:{}},r)},getTopCountries({index:e,startDate:r,endDate:t,limit:a,offset:i,tags:o},s){if(!e)throw Error("Parameter `index` is required when calling `getTopCountries`.");let d={};return void 0!==e&&(d.index=e.toString()),void 0!==r&&(d.startDate=r.toString()),void 0!==t&&(d.endDate=t.toString()),void 0!==a&&(d.limit=a.toString()),void 0!==i&&(d.offset=i.toString()),void 0!==o&&(d.tags=o.toString()),n.request({method:"GET",path:"/2/countries",queryParameters:d,headers:{}},s)},getTopFilterAttributes({index:e,search:r,startDate:t,endDate:a,limit:i,offset:o,tags:s},d){if(!e)throw Error("Parameter `index` is required when calling `getTopFilterAttributes`.");let l={};return void 0!==e&&(l.index=e.toString()),void 0!==r&&(l.search=r.toString()),void 0!==t&&(l.startDate=t.toString()),void 0!==a&&(l.endDate=a.toString()),void 0!==i&&(l.limit=i.toString()),void 0!==o&&(l.offset=o.toString()),void 0!==s&&(l.tags=s.toString()),n.request({method:"GET",path:"/2/filters",queryParameters:l,headers:{}},d)},getTopFilterForAttribute({attribute:e,index:r,search:t,startDate:a,endDate:i,limit:o,offset:s,tags:d},l){if(!e)throw Error("Parameter `attribute` is required when calling `getTopFilterForAttribute`.");if(!r)throw Error("Parameter `index` is required when calling `getTopFilterForAttribute`.");let u="/2/filters/{attribute}".replace("{attribute}",encodeURIComponent(e)),h={};return void 0!==r&&(h.index=r.toString()),void 0!==t&&(h.search=t.toString()),void 0!==a&&(h.startDate=a.toString()),void 0!==i&&(h.endDate=i.toString()),void 0!==o&&(h.limit=o.toString()),void 0!==s&&(h.offset=s.toString()),void 0!==d&&(h.tags=d.toString()),n.request({method:"GET",path:u,queryParameters:h,headers:{}},l)},getTopFiltersNoResults({index:e,search:r,startDate:t,endDate:a,limit:i,offset:o,tags:s},d){if(!e)throw Error("Parameter `index` is required when calling `getTopFiltersNoResults`.");let l={};return void 0!==e&&(l.index=e.toString()),void 0!==r&&(l.search=r.toString()),void 0!==t&&(l.startDate=t.toString()),void 0!==a&&(l.endDate=a.toString()),void 0!==i&&(l.limit=i.toString()),void 0!==o&&(l.offset=o.toString()),void 0!==s&&(l.tags=s.toString()),n.request({method:"GET",path:"/2/filters/noResults",queryParameters:l,headers:{}},d)},getTopHits({index:e,search:r,clickAnalytics:t,revenueAnalytics:a,startDate:i,endDate:o,limit:s,offset:d,tags:l},u){if(!e)throw Error("Parameter `index` is required when calling `getTopHits`.");let h={};return void 0!==e&&(h.index=e.toString()),void 0!==r&&(h.search=r.toString()),void 0!==t&&(h.clickAnalytics=t.toString()),void 0!==a&&(h.revenueAnalytics=a.toString()),void 0!==i&&(h.startDate=i.toString()),void 0!==o&&(h.endDate=o.toString()),void 0!==s&&(h.limit=s.toString()),void 0!==d&&(h.offset=d.toString()),void 0!==l&&(h.tags=l.toString()),n.request({method:"GET",path:"/2/hits",queryParameters:h,headers:{}},u)},getTopSearches({index:e,clickAnalytics:r,revenueAnalytics:t,startDate:a,endDate:i,orderBy:o,direction:s,limit:d,offset:l,tags:u},h){if(!e)throw Error("Parameter `index` is required when calling `getTopSearches`.");let c={};return void 0!==e&&(c.index=e.toString()),void 0!==r&&(c.clickAnalytics=r.toString()),void 0!==t&&(c.revenueAnalytics=t.toString()),void 0!==a&&(c.startDate=a.toString()),void 0!==i&&(c.endDate=i.toString()),void 0!==o&&(c.orderBy=o.toString()),void 0!==s&&(c.direction=s.toString()),void 0!==d&&(c.limit=d.toString()),void 0!==l&&(c.offset=l.toString()),void 0!==u&&(c.tags=u.toString()),n.request({method:"GET",path:"/2/searches",queryParameters:c,headers:{}},h)},getUsersCount({index:e,startDate:r,endDate:t,tags:a},i){if(!e)throw Error("Parameter `index` is required when calling `getUsersCount`.");let o={};return void 0!==e&&(o.index=e.toString()),void 0!==r&&(o.startDate=r.toString()),void 0!==t&&(o.endDate=t.toString()),void 0!==a&&(o.tags=a.toString()),n.request({method:"GET",path:"/2/users/count",queryParameters:o,headers:{}},i)}}}({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${A}-${e}`}),g()]}),...a})}var j="5.23.3",G=["de","us"];function K(e,r,t,a){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");if(t&&("string"!=typeof t||!G.includes(t)))throw Error(`\`region\` must be one of the following: ${G.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...o}){let s=P(e,r,t),n=C({hosts:[{url:i?"insights.{region}.algolia.io".replace("{region}",i):"insights.algolia.io",accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:a,client:"Insights",version:j}),baseHeaders:{"content-type":"text/plain",...s.headers(),...o.baseHeaders},baseQueryParameters:{...s.queryParameters(),...o.baseQueryParameters}});return{transporter:n,appId:e,apiKey:r,clearCache:()=>Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>void 0),get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return n.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return n.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return n.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return n.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},deleteUserToken({userToken:e},r){if(!e)throw Error("Parameter `userToken` is required when calling `deleteUserToken`.");let t="/1/usertokens/{userToken}".replace("{userToken}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},pushEvents(e,r){if(!e)throw Error("Parameter `insightsEvents` is required when calling `pushEvents`.");if(!e.events)throw Error("Parameter `insightsEvents.events` is required when calling `pushEvents`.");return n.request({method:"POST",path:"/1/events",queryParameters:{},headers:{},data:e},r)}}}({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${j}-${e}`}),g()]}),...a})}var B="5.23.3",$=["eu","us"];function H(e,r,t,a){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");if(!t||t&&("string"!=typeof t||!$.includes(t)))throw Error(`\`region\` is required and must be one of the following: ${$.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...o}){let s=P(e,r,t),n=C({hosts:[{url:"personalization.{region}.algolia.com".replace("{region}",i),accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:a,client:"Personalization",version:B}),baseHeaders:{"content-type":"text/plain",...s.headers(),...o.baseHeaders},baseQueryParameters:{...s.queryParameters(),...o.baseQueryParameters}});return{transporter:n,appId:e,apiKey:r,clearCache:()=>Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>void 0),get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return n.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return n.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return n.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return n.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},deleteUserProfile({userToken:e},r){if(!e)throw Error("Parameter `userToken` is required when calling `deleteUserProfile`.");let t="/1/profiles/{userToken}".replace("{userToken}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},getPersonalizationStrategy:e=>n.request({method:"GET",path:"/1/strategies/personalization",queryParameters:{},headers:{}},e),getUserTokenProfile({userToken:e},r){if(!e)throw Error("Parameter `userToken` is required when calling `getUserTokenProfile`.");let t="/1/profiles/personalization/{userToken}".replace("{userToken}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},setPersonalizationStrategy(e,r){if(!e)throw Error("Parameter `personalizationStrategyParams` is required when calling `setPersonalizationStrategy`.");if(!e.eventsScoring)throw Error("Parameter `personalizationStrategyParams.eventsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.facetsScoring)throw Error("Parameter `personalizationStrategyParams.facetsScoring` is required when calling `setPersonalizationStrategy`.");if(!e.personalizationImpact)throw Error("Parameter `personalizationStrategyParams.personalizationImpact` is required when calling `setPersonalizationStrategy`.");return n.request({method:"POST",path:"/1/strategies/personalization",queryParameters:{},headers:{},data:e},r)}}}({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${B}-${e}`}),g()]}),...a})}var Q="5.23.3",W=["eu","us"];function L(e,r,t,a){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");if(!t||t&&("string"!=typeof t||!W.includes(t)))throw Error(`\`region\` is required and must be one of the following: ${W.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...o}){let s=P(e,r,t),n=C({hosts:[{url:"query-suggestions.{region}.algolia.com".replace("{region}",i),accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:a,client:"QuerySuggestions",version:Q}),baseHeaders:{"content-type":"text/plain",...s.headers(),...o.baseHeaders},baseQueryParameters:{...s.queryParameters(),...o.baseQueryParameters}});return{transporter:n,appId:e,apiKey:r,clearCache:()=>Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>void 0),get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},createConfig(e,r){if(!e)throw Error("Parameter `configurationWithIndex` is required when calling `createConfig`.");return n.request({method:"POST",path:"/1/configs",queryParameters:{},headers:{},data:e},r)},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return n.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return n.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return n.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return n.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},deleteConfig({indexName:e},r){if(!e)throw Error("Parameter `indexName` is required when calling `deleteConfig`.");let t="/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},getAllConfigs:e=>n.request({method:"GET",path:"/1/configs",queryParameters:{},headers:{}},e),getConfig({indexName:e},r){if(!e)throw Error("Parameter `indexName` is required when calling `getConfig`.");let t="/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getConfigStatus({indexName:e},r){if(!e)throw Error("Parameter `indexName` is required when calling `getConfigStatus`.");let t="/1/configs/{indexName}/status".replace("{indexName}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getLogFile({indexName:e},r){if(!e)throw Error("Parameter `indexName` is required when calling `getLogFile`.");let t="/1/logs/{indexName}".replace("{indexName}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},updateConfig({indexName:e,configuration:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `updateConfig`.");if(!r)throw Error("Parameter `configuration` is required when calling `updateConfig`.");if(!r.sourceIndices)throw Error("Parameter `configuration.sourceIndices` is required when calling `updateConfig`.");let a="/1/configs/{indexName}".replace("{indexName}",encodeURIComponent(e));return n.request({method:"PUT",path:a,queryParameters:{},headers:{},data:r},t)}}}({appId:e,apiKey:r,region:t,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${Q}-${e}`}),g()]}),...a})}var V="5.23.3";function z(e,r,t){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let o=P(e,r,t),s=C({hosts:[{url:`${e}-dsn.algolia.net`,accept:"read",protocol:"https"},{url:`${e}.algolia.net`,accept:"write",protocol:"https"}].concat(x([{url:`${e}-1.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-2.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-3.algolianet.com`,accept:"readWrite",protocol:"https"}])),...i,algoliaAgent:w({algoliaAgents:a,client:"Search",version:V}),baseHeaders:{"content-type":"text/plain",...o.headers(),...i.baseHeaders},baseQueryParameters:{...o.queryParameters(),...i.baseQueryParameters}});return{transporter:s,appId:e,apiKey:r,clearCache:()=>Promise.all([s.requestsCache.clear(),s.responsesCache.clear()]).then(()=>void 0),get _ua(){return s.algoliaAgent.value},addAlgoliaAgent(e,r){s.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?s.baseQueryParameters["x-algolia-api-key"]=e:s.baseHeaders["x-algolia-api-key"]=e},waitForTask({indexName:e,taskID:r,maxRetries:t=50,timeout:a=e=>Math.min(200*e,5e3)},i){let o=0;return q({func:()=>this.getTask({indexName:e,taskID:r},i),validate:e=>"published"===e.status,aggregator:()=>o+=1,error:{validate:()=>o>=t,message:()=>`The maximum number of retries exceeded. (${o}/${t})`},timeout:()=>a(o)})},waitForAppTask({taskID:e,maxRetries:r=50,timeout:t=e=>Math.min(200*e,5e3)},a){let i=0;return q({func:()=>this.getAppTask({taskID:e},a),validate:e=>"published"===e.status,aggregator:()=>i+=1,error:{validate:()=>i>=r,message:()=>`The maximum number of retries exceeded. (${i}/${r})`},timeout:()=>t(i)})},waitForApiKey({operation:e,key:r,apiKey:t,maxRetries:a=50,timeout:i=e=>Math.min(200*e,5e3)},o){let s=0,n={aggregator:()=>s+=1,error:{validate:()=>s>=a,message:()=>`The maximum number of retries exceeded. (${s}/${a})`},timeout:()=>i(s)};if("update"===e){if(!t)throw Error("`apiKey` is required when waiting for an `update` operation.");return q({...n,func:()=>this.getApiKey({key:r},o),validate:e=>{for(let r of Object.keys(t)){let a=t[r],i=e[r];if(Array.isArray(a)&&Array.isArray(i)){if(a.length!==i.length||a.some((e,r)=>e!==i[r]))return!1}else if(a!==i)return!1}return!0}})}return q({...n,func:()=>this.getApiKey({key:r},o).catch(e=>{if(404!==e.status)throw e}),validate:r=>"add"===e?void 0!==r:void 0===r})},browseObjects({indexName:e,browseParams:r,...t},a){return q({func:t=>this.browse({indexName:e,browseParams:{cursor:t?t.cursor:void 0,hitsPerPage:1e3,...r}},a),validate:e=>void 0===e.cursor,...t})},browseRules({indexName:e,searchRulesParams:r,...t},a){let i={hitsPerPage:1e3,...r};return q({func:r=>this.searchRules({indexName:e,searchRulesParams:{...i,page:r?r.page+1:i.page||0}},a),validate:e=>e.hits.length<i.hitsPerPage,...t})},browseSynonyms({indexName:e,searchSynonymsParams:r,...t},a){let i={page:0,...r,hitsPerPage:1e3};return q({func:r=>{let t=this.searchSynonyms({indexName:e,searchSynonymsParams:{...i,page:i.page}},a);return i.page+=1,t},validate:e=>e.hits.length<i.hitsPerPage,...t})},async chunkedBatch({indexName:e,objects:r,action:t="addObject",waitForTasks:a,batchSize:i=1e3},o){let s=[],n=[];for(let[a,d]of r.entries())s.push({action:t,body:d}),(s.length===i||a===r.length-1)&&(n.push(await this.batch({indexName:e,batchWriteParams:{requests:s}},o)),s=[]);if(a)for(let r of n)await this.waitForTask({indexName:e,taskID:r.taskID});return n},async saveObjects({indexName:e,objects:r,waitForTasks:t,batchSize:a},i){return await this.chunkedBatch({indexName:e,objects:r,action:"addObject",waitForTasks:t,batchSize:a},i)},async deleteObjects({indexName:e,objectIDs:r,waitForTasks:t,batchSize:a},i){return await this.chunkedBatch({indexName:e,objects:r.map(e=>({objectID:e})),action:"deleteObject",waitForTasks:t,batchSize:a},i)},async partialUpdateObjects({indexName:e,objects:r,createIfNotExists:t,waitForTasks:a,batchSize:i},o){return await this.chunkedBatch({indexName:e,objects:r,action:t?"partialUpdateObject":"partialUpdateObjectNoCreate",batchSize:i,waitForTasks:a},o)},async replaceAllObjects({indexName:e,objects:r,batchSize:t,scopes:a},i){let o=`${e}_tmp_${Math.floor(1e6*Math.random())+1e5}`;void 0===a&&(a=["settings","rules","synonyms"]);try{let s=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:o,scope:a}},i),n=await this.chunkedBatch({indexName:o,objects:r,waitForTasks:!0,batchSize:t},i);await this.waitForTask({indexName:o,taskID:s.taskID}),s=await this.operationIndex({indexName:e,operationIndexParams:{operation:"copy",destination:o,scope:a}},i),await this.waitForTask({indexName:o,taskID:s.taskID});let d=await this.operationIndex({indexName:o,operationIndexParams:{operation:"move",destination:e}},i);return await this.waitForTask({indexName:o,taskID:d.taskID}),{copyOperationResponse:s,batchResponses:n,moveOperationResponse:d}}catch(e){throw await this.deleteIndex({indexName:o}),e}},async indexExists({indexName:e}){try{await this.getSettings({indexName:e})}catch(e){if(e instanceof S&&404===e.status)return!1;throw e}return!0},searchForHits(e,r){return this.search(e,r)},searchForFacets(e,r){return this.search(e,r)},addApiKey(e,r){if(!e)throw Error("Parameter `apiKey` is required when calling `addApiKey`.");if(!e.acl)throw Error("Parameter `apiKey.acl` is required when calling `addApiKey`.");return s.request({method:"POST",path:"/1/keys",queryParameters:{},headers:{},data:e},r)},addOrUpdateObject({indexName:e,objectID:r,body:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `addOrUpdateObject`.");if(!r)throw Error("Parameter `objectID` is required when calling `addOrUpdateObject`.");if(!t)throw Error("Parameter `body` is required when calling `addOrUpdateObject`.");let i="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r));return s.request({method:"PUT",path:i,queryParameters:{},headers:{},data:t},a)},appendSource(e,r){if(!e)throw Error("Parameter `source` is required when calling `appendSource`.");if(!e.source)throw Error("Parameter `source.source` is required when calling `appendSource`.");return s.request({method:"POST",path:"/1/security/sources/append",queryParameters:{},headers:{},data:e},r)},assignUserId({xAlgoliaUserID:e,assignUserIdParams:r},t){if(!e)throw Error("Parameter `xAlgoliaUserID` is required when calling `assignUserId`.");if(!r)throw Error("Parameter `assignUserIdParams` is required when calling `assignUserId`.");if(!r.cluster)throw Error("Parameter `assignUserIdParams.cluster` is required when calling `assignUserId`.");let a={};return void 0!==e&&(a["X-Algolia-User-ID"]=e.toString()),s.request({method:"POST",path:"/1/clusters/mapping",queryParameters:{},headers:a,data:r},t)},batch({indexName:e,batchWriteParams:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `batch`.");if(!r)throw Error("Parameter `batchWriteParams` is required when calling `batch`.");if(!r.requests)throw Error("Parameter `batchWriteParams.requests` is required when calling `batch`.");let a="/1/indexes/{indexName}/batch".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r},t)},batchAssignUserIds({xAlgoliaUserID:e,batchAssignUserIdsParams:r},t){if(!e)throw Error("Parameter `xAlgoliaUserID` is required when calling `batchAssignUserIds`.");if(!r)throw Error("Parameter `batchAssignUserIdsParams` is required when calling `batchAssignUserIds`.");if(!r.cluster)throw Error("Parameter `batchAssignUserIdsParams.cluster` is required when calling `batchAssignUserIds`.");if(!r.users)throw Error("Parameter `batchAssignUserIdsParams.users` is required when calling `batchAssignUserIds`.");let a={};return void 0!==e&&(a["X-Algolia-User-ID"]=e.toString()),s.request({method:"POST",path:"/1/clusters/mapping/batch",queryParameters:{},headers:a,data:r},t)},batchDictionaryEntries({dictionaryName:e,batchDictionaryEntriesParams:r},t){if(!e)throw Error("Parameter `dictionaryName` is required when calling `batchDictionaryEntries`.");if(!r)throw Error("Parameter `batchDictionaryEntriesParams` is required when calling `batchDictionaryEntries`.");if(!r.requests)throw Error("Parameter `batchDictionaryEntriesParams.requests` is required when calling `batchDictionaryEntries`.");let a="/1/dictionaries/{dictionaryName}/batch".replace("{dictionaryName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r},t)},browse({indexName:e,browseParams:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `browse`.");let a="/1/indexes/{indexName}/browse".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r||{},useReadTransporter:!0},t)},clearObjects({indexName:e},r){if(!e)throw Error("Parameter `indexName` is required when calling `clearObjects`.");let t="/1/indexes/{indexName}/clear".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:t,queryParameters:{},headers:{}},r)},clearRules({indexName:e,forwardToReplicas:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `clearRules`.");let a="/1/indexes/{indexName}/rules/clear".replace("{indexName}",encodeURIComponent(e)),i={};return void 0!==r&&(i.forwardToReplicas=r.toString()),s.request({method:"POST",path:a,queryParameters:i,headers:{}},t)},clearSynonyms({indexName:e,forwardToReplicas:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `clearSynonyms`.");let a="/1/indexes/{indexName}/synonyms/clear".replace("{indexName}",encodeURIComponent(e)),i={};return void 0!==r&&(i.forwardToReplicas=r.toString()),s.request({method:"POST",path:a,queryParameters:i,headers:{}},t)},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return s.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return s.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return s.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return s.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},deleteApiKey({key:e},r){if(!e)throw Error("Parameter `key` is required when calling `deleteApiKey`.");let t="/1/keys/{key}".replace("{key}",encodeURIComponent(e));return s.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteBy({indexName:e,deleteByParams:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `deleteBy`.");if(!r)throw Error("Parameter `deleteByParams` is required when calling `deleteBy`.");let a="/1/indexes/{indexName}/deleteByQuery".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r},t)},deleteIndex({indexName:e},r){if(!e)throw Error("Parameter `indexName` is required when calling `deleteIndex`.");let t="/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e));return s.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteObject({indexName:e,objectID:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `deleteObject`.");if(!r)throw Error("Parameter `objectID` is required when calling `deleteObject`.");let a="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r));return s.request({method:"DELETE",path:a,queryParameters:{},headers:{}},t)},deleteRule({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `deleteRule`.");if(!r)throw Error("Parameter `objectID` is required when calling `deleteRule`.");let i="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),o={};return void 0!==t&&(o.forwardToReplicas=t.toString()),s.request({method:"DELETE",path:i,queryParameters:o,headers:{}},a)},deleteSource({source:e},r){if(!e)throw Error("Parameter `source` is required when calling `deleteSource`.");let t="/1/security/sources/{source}".replace("{source}",encodeURIComponent(e));return s.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteSynonym({indexName:e,objectID:r,forwardToReplicas:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `deleteSynonym`.");if(!r)throw Error("Parameter `objectID` is required when calling `deleteSynonym`.");let i="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),o={};return void 0!==t&&(o.forwardToReplicas=t.toString()),s.request({method:"DELETE",path:i,queryParameters:o,headers:{}},a)},getApiKey({key:e},r){if(!e)throw Error("Parameter `key` is required when calling `getApiKey`.");let t="/1/keys/{key}".replace("{key}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getAppTask({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `getAppTask`.");let t="/1/task/{taskID}".replace("{taskID}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getDictionaryLanguages:e=>s.request({method:"GET",path:"/1/dictionaries/*/languages",queryParameters:{},headers:{}},e),getDictionarySettings:e=>s.request({method:"GET",path:"/1/dictionaries/*/settings",queryParameters:{},headers:{}},e),getLogs({offset:e,length:r,indexName:t,type:a}={},i){let o={};return void 0!==e&&(o.offset=e.toString()),void 0!==r&&(o.length=r.toString()),void 0!==t&&(o.indexName=t.toString()),void 0!==a&&(o.type=a.toString()),s.request({method:"GET",path:"/1/logs",queryParameters:o,headers:{}},i)},getObject({indexName:e,objectID:r,attributesToRetrieve:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `getObject`.");if(!r)throw Error("Parameter `objectID` is required when calling `getObject`.");let i="/1/indexes/{indexName}/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),o={};return void 0!==t&&(o.attributesToRetrieve=t.toString()),s.request({method:"GET",path:i,queryParameters:o,headers:{}},a)},getObjects(e,r){if(!e)throw Error("Parameter `getObjectsParams` is required when calling `getObjects`.");if(!e.requests)throw Error("Parameter `getObjectsParams.requests` is required when calling `getObjects`.");return s.request({method:"POST",path:"/1/indexes/*/objects",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0},r)},getRule({indexName:e,objectID:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `getRule`.");if(!r)throw Error("Parameter `objectID` is required when calling `getRule`.");let a="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r));return s.request({method:"GET",path:a,queryParameters:{},headers:{}},t)},getSettings({indexName:e},r){if(!e)throw Error("Parameter `indexName` is required when calling `getSettings`.");let t="/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getSources:e=>s.request({method:"GET",path:"/1/security/sources",queryParameters:{},headers:{}},e),getSynonym({indexName:e,objectID:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `getSynonym`.");if(!r)throw Error("Parameter `objectID` is required when calling `getSynonym`.");let a="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r));return s.request({method:"GET",path:a,queryParameters:{},headers:{}},t)},getTask({indexName:e,taskID:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `getTask`.");if(!r)throw Error("Parameter `taskID` is required when calling `getTask`.");let a="/1/indexes/{indexName}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{taskID}",encodeURIComponent(r));return s.request({method:"GET",path:a,queryParameters:{},headers:{}},t)},getTopUserIds:e=>s.request({method:"GET",path:"/1/clusters/mapping/top",queryParameters:{},headers:{}},e),getUserId({userID:e},r){if(!e)throw Error("Parameter `userID` is required when calling `getUserId`.");let t="/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},hasPendingMappings({getClusters:e}={},r){let t={};return void 0!==e&&(t.getClusters=e.toString()),s.request({method:"GET",path:"/1/clusters/mapping/pending",queryParameters:t,headers:{}},r)},listApiKeys:e=>s.request({method:"GET",path:"/1/keys",queryParameters:{},headers:{}},e),listClusters:e=>s.request({method:"GET",path:"/1/clusters",queryParameters:{},headers:{}},e),listIndices({page:e,hitsPerPage:r}={},t){let a={};return void 0!==e&&(a.page=e.toString()),void 0!==r&&(a.hitsPerPage=r.toString()),s.request({method:"GET",path:"/1/indexes",queryParameters:a,headers:{}},t)},listUserIds({page:e,hitsPerPage:r}={},t){let a={};return void 0!==e&&(a.page=e.toString()),void 0!==r&&(a.hitsPerPage=r.toString()),s.request({method:"GET",path:"/1/clusters/mapping",queryParameters:a,headers:{}},t)},multipleBatch(e,r){if(!e)throw Error("Parameter `batchParams` is required when calling `multipleBatch`.");if(!e.requests)throw Error("Parameter `batchParams.requests` is required when calling `multipleBatch`.");return s.request({method:"POST",path:"/1/indexes/*/batch",queryParameters:{},headers:{},data:e},r)},operationIndex({indexName:e,operationIndexParams:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `operationIndex`.");if(!r)throw Error("Parameter `operationIndexParams` is required when calling `operationIndex`.");if(!r.operation)throw Error("Parameter `operationIndexParams.operation` is required when calling `operationIndex`.");if(!r.destination)throw Error("Parameter `operationIndexParams.destination` is required when calling `operationIndex`.");let a="/1/indexes/{indexName}/operation".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r},t)},partialUpdateObject({indexName:e,objectID:r,attributesToUpdate:t,createIfNotExists:a},i){if(!e)throw Error("Parameter `indexName` is required when calling `partialUpdateObject`.");if(!r)throw Error("Parameter `objectID` is required when calling `partialUpdateObject`.");if(!t)throw Error("Parameter `attributesToUpdate` is required when calling `partialUpdateObject`.");let o="/1/indexes/{indexName}/{objectID}/partial".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};return void 0!==a&&(n.createIfNotExists=a.toString()),s.request({method:"POST",path:o,queryParameters:n,headers:{},data:t},i)},removeUserId({userID:e},r){if(!e)throw Error("Parameter `userID` is required when calling `removeUserId`.");let t="/1/clusters/mapping/{userID}".replace("{userID}",encodeURIComponent(e));return s.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},replaceSources({source:e},r){if(!e)throw Error("Parameter `source` is required when calling `replaceSources`.");return s.request({method:"PUT",path:"/1/security/sources",queryParameters:{},headers:{},data:e},r)},restoreApiKey({key:e},r){if(!e)throw Error("Parameter `key` is required when calling `restoreApiKey`.");let t="/1/keys/{key}/restore".replace("{key}",encodeURIComponent(e));return s.request({method:"POST",path:t,queryParameters:{},headers:{}},r)},saveObject({indexName:e,body:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `saveObject`.");if(!r)throw Error("Parameter `body` is required when calling `saveObject`.");let a="/1/indexes/{indexName}".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r},t)},saveRule({indexName:e,objectID:r,rule:t,forwardToReplicas:a},i){if(!e)throw Error("Parameter `indexName` is required when calling `saveRule`.");if(!r)throw Error("Parameter `objectID` is required when calling `saveRule`.");if(!t)throw Error("Parameter `rule` is required when calling `saveRule`.");if(!t.objectID)throw Error("Parameter `rule.objectID` is required when calling `saveRule`.");if(!t.consequence)throw Error("Parameter `rule.consequence` is required when calling `saveRule`.");let o="/1/indexes/{indexName}/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};return void 0!==a&&(n.forwardToReplicas=a.toString()),s.request({method:"PUT",path:o,queryParameters:n,headers:{},data:t},i)},saveRules({indexName:e,rules:r,forwardToReplicas:t,clearExistingRules:a},i){if(!e)throw Error("Parameter `indexName` is required when calling `saveRules`.");if(!r)throw Error("Parameter `rules` is required when calling `saveRules`.");let o="/1/indexes/{indexName}/rules/batch".replace("{indexName}",encodeURIComponent(e)),n={};return void 0!==t&&(n.forwardToReplicas=t.toString()),void 0!==a&&(n.clearExistingRules=a.toString()),s.request({method:"POST",path:o,queryParameters:n,headers:{},data:r},i)},saveSynonym({indexName:e,objectID:r,synonymHit:t,forwardToReplicas:a},i){if(!e)throw Error("Parameter `indexName` is required when calling `saveSynonym`.");if(!r)throw Error("Parameter `objectID` is required when calling `saveSynonym`.");if(!t)throw Error("Parameter `synonymHit` is required when calling `saveSynonym`.");if(!t.objectID)throw Error("Parameter `synonymHit.objectID` is required when calling `saveSynonym`.");if(!t.type)throw Error("Parameter `synonymHit.type` is required when calling `saveSynonym`.");let o="/1/indexes/{indexName}/synonyms/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{objectID}",encodeURIComponent(r)),n={};return void 0!==a&&(n.forwardToReplicas=a.toString()),s.request({method:"PUT",path:o,queryParameters:n,headers:{},data:t},i)},saveSynonyms({indexName:e,synonymHit:r,forwardToReplicas:t,replaceExistingSynonyms:a},i){if(!e)throw Error("Parameter `indexName` is required when calling `saveSynonyms`.");if(!r)throw Error("Parameter `synonymHit` is required when calling `saveSynonyms`.");let o="/1/indexes/{indexName}/synonyms/batch".replace("{indexName}",encodeURIComponent(e)),n={};return void 0!==t&&(n.forwardToReplicas=t.toString()),void 0!==a&&(n.replaceExistingSynonyms=a.toString()),s.request({method:"POST",path:o,queryParameters:n,headers:{},data:r},i)},search(e,r){if(e&&Array.isArray(e)&&(e={requests:e.map(({params:e,...r})=>"facet"===r.type?{...r,...e,type:"facet"}:{...r,...e,facet:void 0,maxFacetHits:void 0,facetQuery:void 0})}),!e)throw Error("Parameter `searchMethodParams` is required when calling `search`.");if(!e.requests)throw Error("Parameter `searchMethodParams.requests` is required when calling `search`.");let t={method:"POST",path:"/1/indexes/*/queries",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return s.request(t,r)},searchDictionaryEntries({dictionaryName:e,searchDictionaryEntriesParams:r},t){if(!e)throw Error("Parameter `dictionaryName` is required when calling `searchDictionaryEntries`.");if(!r)throw Error("Parameter `searchDictionaryEntriesParams` is required when calling `searchDictionaryEntries`.");if(!r.query)throw Error("Parameter `searchDictionaryEntriesParams.query` is required when calling `searchDictionaryEntries`.");let a="/1/dictionaries/{dictionaryName}/search".replace("{dictionaryName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r,useReadTransporter:!0,cacheable:!0},t)},searchForFacetValues({indexName:e,facetName:r,searchForFacetValuesRequest:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `searchForFacetValues`.");if(!r)throw Error("Parameter `facetName` is required when calling `searchForFacetValues`.");let i="/1/indexes/{indexName}/facets/{facetName}/query".replace("{indexName}",encodeURIComponent(e)).replace("{facetName}",encodeURIComponent(r));return s.request({method:"POST",path:i,queryParameters:{},headers:{},data:t||{},useReadTransporter:!0,cacheable:!0},a)},searchRules({indexName:e,searchRulesParams:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `searchRules`.");let a="/1/indexes/{indexName}/rules/search".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0},t)},searchSingleIndex({indexName:e,searchParams:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `searchSingleIndex`.");let a="/1/indexes/{indexName}/query".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0},t)},searchSynonyms({indexName:e,searchSynonymsParams:r},t){if(!e)throw Error("Parameter `indexName` is required when calling `searchSynonyms`.");let a="/1/indexes/{indexName}/synonyms/search".replace("{indexName}",encodeURIComponent(e));return s.request({method:"POST",path:a,queryParameters:{},headers:{},data:r||{},useReadTransporter:!0,cacheable:!0},t)},searchUserIds(e,r){if(!e)throw Error("Parameter `searchUserIdsParams` is required when calling `searchUserIds`.");if(!e.query)throw Error("Parameter `searchUserIdsParams.query` is required when calling `searchUserIds`.");return s.request({method:"POST",path:"/1/clusters/mapping/search",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0},r)},setDictionarySettings(e,r){if(!e)throw Error("Parameter `dictionarySettingsParams` is required when calling `setDictionarySettings`.");if(!e.disableStandardEntries)throw Error("Parameter `dictionarySettingsParams.disableStandardEntries` is required when calling `setDictionarySettings`.");return s.request({method:"PUT",path:"/1/dictionaries/*/settings",queryParameters:{},headers:{},data:e},r)},setSettings({indexName:e,indexSettings:r,forwardToReplicas:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `setSettings`.");if(!r)throw Error("Parameter `indexSettings` is required when calling `setSettings`.");let i="/1/indexes/{indexName}/settings".replace("{indexName}",encodeURIComponent(e)),o={};return void 0!==t&&(o.forwardToReplicas=t.toString()),s.request({method:"PUT",path:i,queryParameters:o,headers:{},data:r},a)},updateApiKey({key:e,apiKey:r},t){if(!e)throw Error("Parameter `key` is required when calling `updateApiKey`.");if(!r)throw Error("Parameter `apiKey` is required when calling `updateApiKey`.");if(!r.acl)throw Error("Parameter `apiKey.acl` is required when calling `updateApiKey`.");let a="/1/keys/{key}".replace("{key}",encodeURIComponent(e));return s.request({method:"PUT",path:a,queryParameters:{},headers:{},data:r},t)}}}({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${V}-${e}`}),g()]}),...t})}var F="1.23.3",M=["eu","us"];function J(e){return"onDemand"===e.type}function _(e){return"schedule"===e.type}function X(e){return"subscription"===e.type}function Y(e,r,t,a){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");if(!t||t&&("string"!=typeof t||!M.includes(t)))throw Error(`\`region\` is required and must be one of the following: ${M.join(", ")}`);return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,region:i,...o}){let s=P(e,r,t),n=C({hosts:[{url:"data.{region}.algolia.com".replace("{region}",i),accept:"readWrite",protocol:"https"}],...o,algoliaAgent:w({algoliaAgents:a,client:"Ingestion",version:F}),baseHeaders:{"content-type":"text/plain",...s.headers(),...o.baseHeaders},baseQueryParameters:{...s.queryParameters(),...o.baseQueryParameters}});return{transporter:n,appId:e,apiKey:r,clearCache:()=>Promise.all([n.requestsCache.clear(),n.responsesCache.clear()]).then(()=>void 0),get _ua(){return n.algoliaAgent.value},addAlgoliaAgent(e,r){n.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?n.baseQueryParameters["x-algolia-api-key"]=e:n.baseHeaders["x-algolia-api-key"]=e},createAuthentication(e,r){if(!e)throw Error("Parameter `authenticationCreate` is required when calling `createAuthentication`.");if(!e.type)throw Error("Parameter `authenticationCreate.type` is required when calling `createAuthentication`.");if(!e.name)throw Error("Parameter `authenticationCreate.name` is required when calling `createAuthentication`.");if(!e.input)throw Error("Parameter `authenticationCreate.input` is required when calling `createAuthentication`.");return n.request({method:"POST",path:"/1/authentications",queryParameters:{},headers:{},data:e},r)},createDestination(e,r){if(!e)throw Error("Parameter `destinationCreate` is required when calling `createDestination`.");if(!e.type)throw Error("Parameter `destinationCreate.type` is required when calling `createDestination`.");if(!e.name)throw Error("Parameter `destinationCreate.name` is required when calling `createDestination`.");if(!e.input)throw Error("Parameter `destinationCreate.input` is required when calling `createDestination`.");return n.request({method:"POST",path:"/1/destinations",queryParameters:{},headers:{},data:e},r)},createSource(e,r){if(!e)throw Error("Parameter `sourceCreate` is required when calling `createSource`.");if(!e.type)throw Error("Parameter `sourceCreate.type` is required when calling `createSource`.");if(!e.name)throw Error("Parameter `sourceCreate.name` is required when calling `createSource`.");return n.request({method:"POST",path:"/1/sources",queryParameters:{},headers:{},data:e},r)},createTask(e,r){if(!e)throw Error("Parameter `taskCreate` is required when calling `createTask`.");if(!e.sourceID)throw Error("Parameter `taskCreate.sourceID` is required when calling `createTask`.");if(!e.destinationID)throw Error("Parameter `taskCreate.destinationID` is required when calling `createTask`.");if(!e.action)throw Error("Parameter `taskCreate.action` is required when calling `createTask`.");return n.request({method:"POST",path:"/2/tasks",queryParameters:{},headers:{},data:e},r)},createTaskV1(e,r){if(!e)throw Error("Parameter `taskCreate` is required when calling `createTaskV1`.");if(!e.sourceID)throw Error("Parameter `taskCreate.sourceID` is required when calling `createTaskV1`.");if(!e.destinationID)throw Error("Parameter `taskCreate.destinationID` is required when calling `createTaskV1`.");if(!e.trigger)throw Error("Parameter `taskCreate.trigger` is required when calling `createTaskV1`.");if(!e.action)throw Error("Parameter `taskCreate.action` is required when calling `createTaskV1`.");return n.request({method:"POST",path:"/1/tasks",queryParameters:{},headers:{},data:e},r)},createTransformation(e,r){if(!e)throw Error("Parameter `transformationCreate` is required when calling `createTransformation`.");if(!e.code)throw Error("Parameter `transformationCreate.code` is required when calling `createTransformation`.");if(!e.name)throw Error("Parameter `transformationCreate.name` is required when calling `createTransformation`.");return n.request({method:"POST",path:"/1/transformations",queryParameters:{},headers:{},data:e},r)},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return n.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return n.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return n.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return n.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},deleteAuthentication({authenticationID:e},r){if(!e)throw Error("Parameter `authenticationID` is required when calling `deleteAuthentication`.");let t="/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteDestination({destinationID:e},r){if(!e)throw Error("Parameter `destinationID` is required when calling `deleteDestination`.");let t="/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteSource({sourceID:e},r){if(!e)throw Error("Parameter `sourceID` is required when calling `deleteSource`.");let t="/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteTask({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `deleteTask`.");let t="/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteTaskV1({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `deleteTaskV1`.");let t="/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},deleteTransformation({transformationID:e},r){if(!e)throw Error("Parameter `transformationID` is required when calling `deleteTransformation`.");let t="/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e));return n.request({method:"DELETE",path:t,queryParameters:{},headers:{}},r)},disableTask({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `disableTask`.");let t="/2/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e));return n.request({method:"PUT",path:t,queryParameters:{},headers:{}},r)},disableTaskV1({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `disableTaskV1`.");let t="/1/tasks/{taskID}/disable".replace("{taskID}",encodeURIComponent(e));return n.request({method:"PUT",path:t,queryParameters:{},headers:{}},r)},enableTask({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `enableTask`.");let t="/2/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e));return n.request({method:"PUT",path:t,queryParameters:{},headers:{}},r)},enableTaskV1({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `enableTaskV1`.");let t="/1/tasks/{taskID}/enable".replace("{taskID}",encodeURIComponent(e));return n.request({method:"PUT",path:t,queryParameters:{},headers:{}},r)},getAuthentication({authenticationID:e},r){if(!e)throw Error("Parameter `authenticationID` is required when calling `getAuthentication`.");let t="/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getDestination({destinationID:e},r){if(!e)throw Error("Parameter `destinationID` is required when calling `getDestination`.");let t="/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getEvent({runID:e,eventID:r},t){if(!e)throw Error("Parameter `runID` is required when calling `getEvent`.");if(!r)throw Error("Parameter `eventID` is required when calling `getEvent`.");let a="/1/runs/{runID}/events/{eventID}".replace("{runID}",encodeURIComponent(e)).replace("{eventID}",encodeURIComponent(r));return n.request({method:"GET",path:a,queryParameters:{},headers:{}},t)},getRun({runID:e},r){if(!e)throw Error("Parameter `runID` is required when calling `getRun`.");let t="/1/runs/{runID}".replace("{runID}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getSource({sourceID:e},r){if(!e)throw Error("Parameter `sourceID` is required when calling `getSource`.");let t="/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getTask({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `getTask`.");let t="/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getTaskV1({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `getTaskV1`.");let t="/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getTransformation({transformationID:e},r){if(!e)throw Error("Parameter `transformationID` is required when calling `getTransformation`.");let t="/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e));return n.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},listAuthentications({itemsPerPage:e,page:r,type:t,platform:a,sort:i,order:o}={},s){let d={};return void 0!==e&&(d.itemsPerPage=e.toString()),void 0!==r&&(d.page=r.toString()),void 0!==t&&(d.type=t.toString()),void 0!==a&&(d.platform=a.toString()),void 0!==i&&(d.sort=i.toString()),void 0!==o&&(d.order=o.toString()),n.request({method:"GET",path:"/1/authentications",queryParameters:d,headers:{}},s)},listDestinations({itemsPerPage:e,page:r,type:t,authenticationID:a,transformationID:i,sort:o,order:s}={},d){let l={};return void 0!==e&&(l.itemsPerPage=e.toString()),void 0!==r&&(l.page=r.toString()),void 0!==t&&(l.type=t.toString()),void 0!==a&&(l.authenticationID=a.toString()),void 0!==i&&(l.transformationID=i.toString()),void 0!==o&&(l.sort=o.toString()),void 0!==s&&(l.order=s.toString()),n.request({method:"GET",path:"/1/destinations",queryParameters:l,headers:{}},d)},listEvents({runID:e,itemsPerPage:r,page:t,status:a,type:i,sort:o,order:s,startDate:d,endDate:l},u){if(!e)throw Error("Parameter `runID` is required when calling `listEvents`.");let h="/1/runs/{runID}/events".replace("{runID}",encodeURIComponent(e)),c={};return void 0!==r&&(c.itemsPerPage=r.toString()),void 0!==t&&(c.page=t.toString()),void 0!==a&&(c.status=a.toString()),void 0!==i&&(c.type=i.toString()),void 0!==o&&(c.sort=o.toString()),void 0!==s&&(c.order=s.toString()),void 0!==d&&(c.startDate=d.toString()),void 0!==l&&(c.endDate=l.toString()),n.request({method:"GET",path:h,queryParameters:c,headers:{}},u)},listRuns({itemsPerPage:e,page:r,status:t,type:a,taskID:i,sort:o,order:s,startDate:d,endDate:l}={},u){let h={};return void 0!==e&&(h.itemsPerPage=e.toString()),void 0!==r&&(h.page=r.toString()),void 0!==t&&(h.status=t.toString()),void 0!==a&&(h.type=a.toString()),void 0!==i&&(h.taskID=i.toString()),void 0!==o&&(h.sort=o.toString()),void 0!==s&&(h.order=s.toString()),void 0!==d&&(h.startDate=d.toString()),void 0!==l&&(h.endDate=l.toString()),n.request({method:"GET",path:"/1/runs",queryParameters:h,headers:{}},u)},listSources({itemsPerPage:e,page:r,type:t,authenticationID:a,sort:i,order:o}={},s){let d={};return void 0!==e&&(d.itemsPerPage=e.toString()),void 0!==r&&(d.page=r.toString()),void 0!==t&&(d.type=t.toString()),void 0!==a&&(d.authenticationID=a.toString()),void 0!==i&&(d.sort=i.toString()),void 0!==o&&(d.order=o.toString()),n.request({method:"GET",path:"/1/sources",queryParameters:d,headers:{}},s)},listTasks({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:i,sourceType:o,destinationID:s,triggerType:d,withEmailNotifications:l,sort:u,order:h}={},c){let m={};return void 0!==e&&(m.itemsPerPage=e.toString()),void 0!==r&&(m.page=r.toString()),void 0!==t&&(m.action=t.toString()),void 0!==a&&(m.enabled=a.toString()),void 0!==i&&(m.sourceID=i.toString()),void 0!==o&&(m.sourceType=o.toString()),void 0!==s&&(m.destinationID=s.toString()),void 0!==d&&(m.triggerType=d.toString()),void 0!==l&&(m.withEmailNotifications=l.toString()),void 0!==u&&(m.sort=u.toString()),void 0!==h&&(m.order=h.toString()),n.request({method:"GET",path:"/2/tasks",queryParameters:m,headers:{}},c)},listTasksV1({itemsPerPage:e,page:r,action:t,enabled:a,sourceID:i,destinationID:o,triggerType:s,sort:d,order:l}={},u){let h={};return void 0!==e&&(h.itemsPerPage=e.toString()),void 0!==r&&(h.page=r.toString()),void 0!==t&&(h.action=t.toString()),void 0!==a&&(h.enabled=a.toString()),void 0!==i&&(h.sourceID=i.toString()),void 0!==o&&(h.destinationID=o.toString()),void 0!==s&&(h.triggerType=s.toString()),void 0!==d&&(h.sort=d.toString()),void 0!==l&&(h.order=l.toString()),n.request({method:"GET",path:"/1/tasks",queryParameters:h,headers:{}},u)},listTransformations({itemsPerPage:e,page:r,sort:t,order:a}={},i){let o={};return void 0!==e&&(o.itemsPerPage=e.toString()),void 0!==r&&(o.page=r.toString()),void 0!==t&&(o.sort=t.toString()),void 0!==a&&(o.order=a.toString()),n.request({method:"GET",path:"/1/transformations",queryParameters:o,headers:{}},i)},pushTask({taskID:e,pushTaskPayload:r,watch:t},a){if(!e)throw Error("Parameter `taskID` is required when calling `pushTask`.");if(!r)throw Error("Parameter `pushTaskPayload` is required when calling `pushTask`.");if(!r.action)throw Error("Parameter `pushTaskPayload.action` is required when calling `pushTask`.");if(!r.records)throw Error("Parameter `pushTaskPayload.records` is required when calling `pushTask`.");let i="/2/tasks/{taskID}/push".replace("{taskID}",encodeURIComponent(e)),o={};return void 0!==t&&(o.watch=t.toString()),a={timeouts:{connect:18e4,read:18e4,write:18e4,...a?.timeouts}},n.request({method:"POST",path:i,queryParameters:o,headers:{},data:r},a)},runSource({sourceID:e,runSourcePayload:r},t){if(!e)throw Error("Parameter `sourceID` is required when calling `runSource`.");let a="/1/sources/{sourceID}/run".replace("{sourceID}",encodeURIComponent(e));return n.request({method:"POST",path:a,queryParameters:{},headers:{},data:r||{}},t)},runTask({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `runTask`.");let t="/2/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e));return n.request({method:"POST",path:t,queryParameters:{},headers:{}},r)},runTaskV1({taskID:e},r){if(!e)throw Error("Parameter `taskID` is required when calling `runTaskV1`.");let t="/1/tasks/{taskID}/run".replace("{taskID}",encodeURIComponent(e));return n.request({method:"POST",path:t,queryParameters:{},headers:{}},r)},searchAuthentications(e,r){if(!e)throw Error("Parameter `authenticationSearch` is required when calling `searchAuthentications`.");if(!e.authenticationIDs)throw Error("Parameter `authenticationSearch.authenticationIDs` is required when calling `searchAuthentications`.");return n.request({method:"POST",path:"/1/authentications/search",queryParameters:{},headers:{},data:e},r)},searchDestinations(e,r){if(!e)throw Error("Parameter `destinationSearch` is required when calling `searchDestinations`.");if(!e.destinationIDs)throw Error("Parameter `destinationSearch.destinationIDs` is required when calling `searchDestinations`.");return n.request({method:"POST",path:"/1/destinations/search",queryParameters:{},headers:{},data:e},r)},searchSources(e,r){if(!e)throw Error("Parameter `sourceSearch` is required when calling `searchSources`.");if(!e.sourceIDs)throw Error("Parameter `sourceSearch.sourceIDs` is required when calling `searchSources`.");return n.request({method:"POST",path:"/1/sources/search",queryParameters:{},headers:{},data:e},r)},searchTasks(e,r){if(!e)throw Error("Parameter `taskSearch` is required when calling `searchTasks`.");if(!e.taskIDs)throw Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasks`.");return n.request({method:"POST",path:"/2/tasks/search",queryParameters:{},headers:{},data:e},r)},searchTasksV1(e,r){if(!e)throw Error("Parameter `taskSearch` is required when calling `searchTasksV1`.");if(!e.taskIDs)throw Error("Parameter `taskSearch.taskIDs` is required when calling `searchTasksV1`.");return n.request({method:"POST",path:"/1/tasks/search",queryParameters:{},headers:{},data:e},r)},searchTransformations(e,r){if(!e)throw Error("Parameter `transformationSearch` is required when calling `searchTransformations`.");if(!e.transformationIDs)throw Error("Parameter `transformationSearch.transformationIDs` is required when calling `searchTransformations`.");return n.request({method:"POST",path:"/1/transformations/search",queryParameters:{},headers:{},data:e},r)},triggerDockerSourceDiscover({sourceID:e},r){if(!e)throw Error("Parameter `sourceID` is required when calling `triggerDockerSourceDiscover`.");let t="/1/sources/{sourceID}/discover".replace("{sourceID}",encodeURIComponent(e));return r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},n.request({method:"POST",path:t,queryParameters:{},headers:{}},r)},tryTransformation(e,r){if(!e)throw Error("Parameter `transformationTry` is required when calling `tryTransformation`.");if(!e.code)throw Error("Parameter `transformationTry.code` is required when calling `tryTransformation`.");if(!e.sampleRecord)throw Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformation`.");return n.request({method:"POST",path:"/1/transformations/try",queryParameters:{},headers:{},data:e},r)},tryTransformationBeforeUpdate({transformationID:e,transformationTry:r},t){if(!e)throw Error("Parameter `transformationID` is required when calling `tryTransformationBeforeUpdate`.");if(!r)throw Error("Parameter `transformationTry` is required when calling `tryTransformationBeforeUpdate`.");if(!r.code)throw Error("Parameter `transformationTry.code` is required when calling `tryTransformationBeforeUpdate`.");if(!r.sampleRecord)throw Error("Parameter `transformationTry.sampleRecord` is required when calling `tryTransformationBeforeUpdate`.");let a="/1/transformations/{transformationID}/try".replace("{transformationID}",encodeURIComponent(e));return n.request({method:"POST",path:a,queryParameters:{},headers:{},data:r},t)},updateAuthentication({authenticationID:e,authenticationUpdate:r},t){if(!e)throw Error("Parameter `authenticationID` is required when calling `updateAuthentication`.");if(!r)throw Error("Parameter `authenticationUpdate` is required when calling `updateAuthentication`.");let a="/1/authentications/{authenticationID}".replace("{authenticationID}",encodeURIComponent(e));return n.request({method:"PATCH",path:a,queryParameters:{},headers:{},data:r},t)},updateDestination({destinationID:e,destinationUpdate:r},t){if(!e)throw Error("Parameter `destinationID` is required when calling `updateDestination`.");if(!r)throw Error("Parameter `destinationUpdate` is required when calling `updateDestination`.");let a="/1/destinations/{destinationID}".replace("{destinationID}",encodeURIComponent(e));return n.request({method:"PATCH",path:a,queryParameters:{},headers:{},data:r},t)},updateSource({sourceID:e,sourceUpdate:r},t){if(!e)throw Error("Parameter `sourceID` is required when calling `updateSource`.");if(!r)throw Error("Parameter `sourceUpdate` is required when calling `updateSource`.");let a="/1/sources/{sourceID}".replace("{sourceID}",encodeURIComponent(e));return n.request({method:"PATCH",path:a,queryParameters:{},headers:{},data:r},t)},updateTask({taskID:e,taskUpdate:r},t){if(!e)throw Error("Parameter `taskID` is required when calling `updateTask`.");if(!r)throw Error("Parameter `taskUpdate` is required when calling `updateTask`.");let a="/2/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e));return n.request({method:"PATCH",path:a,queryParameters:{},headers:{},data:r},t)},updateTaskV1({taskID:e,taskUpdate:r},t){if(!e)throw Error("Parameter `taskID` is required when calling `updateTaskV1`.");if(!r)throw Error("Parameter `taskUpdate` is required when calling `updateTaskV1`.");let a="/1/tasks/{taskID}".replace("{taskID}",encodeURIComponent(e));return n.request({method:"PATCH",path:a,queryParameters:{},headers:{},data:r},t)},updateTransformation({transformationID:e,transformationCreate:r},t){if(!e)throw Error("Parameter `transformationID` is required when calling `updateTransformation`.");if(!r)throw Error("Parameter `transformationCreate` is required when calling `updateTransformation`.");if(!r.code)throw Error("Parameter `transformationCreate.code` is required when calling `updateTransformation`.");if(!r.name)throw Error("Parameter `transformationCreate.name` is required when calling `updateTransformation`.");let a="/1/transformations/{transformationID}".replace("{transformationID}",encodeURIComponent(e));return n.request({method:"PUT",path:a,queryParameters:{},headers:{},data:r},t)},validateSource:(e,r)=>(r={timeouts:{connect:18e4,read:18e4,write:18e4,...r?.timeouts}},n.request({method:"POST",path:"/1/sources/validate",queryParameters:{},headers:{},data:e||{}},r)),validateSourceBeforeUpdate({sourceID:e,sourceUpdate:r},t){if(!e)throw Error("Parameter `sourceID` is required when calling `validateSourceBeforeUpdate`.");if(!r)throw Error("Parameter `sourceUpdate` is required when calling `validateSourceBeforeUpdate`.");let a="/1/sources/{sourceID}/validate".replace("{sourceID}",encodeURIComponent(e));return t={timeouts:{connect:18e4,read:18e4,write:18e4,...t?.timeouts}},n.request({method:"POST",path:a,queryParameters:{},headers:{},data:r},t)}}}({appId:e,apiKey:r,region:t,timeouts:{connect:25e3,read:25e3,write:25e3},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${F}-${e}`}),g()]}),...a})}var Z="1.23.3";function ee(e,r,t){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let o=P(e,r,t),s=C({hosts:[{url:"status.algolia.com",accept:"readWrite",protocol:"https"}],...i,algoliaAgent:w({algoliaAgents:a,client:"Monitoring",version:Z}),baseHeaders:{"content-type":"text/plain",...o.headers(),...i.baseHeaders},baseQueryParameters:{...o.queryParameters(),...i.baseQueryParameters}});return{transporter:s,appId:e,apiKey:r,clearCache:()=>Promise.all([s.requestsCache.clear(),s.responsesCache.clear()]).then(()=>void 0),get _ua(){return s.algoliaAgent.value},addAlgoliaAgent(e,r){s.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?s.baseQueryParameters["x-algolia-api-key"]=e:s.baseHeaders["x-algolia-api-key"]=e},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return s.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return s.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return s.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return s.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},getClusterIncidents({clusters:e},r){if(!e)throw Error("Parameter `clusters` is required when calling `getClusterIncidents`.");let t="/1/incidents/{clusters}".replace("{clusters}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getClusterStatus({clusters:e},r){if(!e)throw Error("Parameter `clusters` is required when calling `getClusterStatus`.");let t="/1/status/{clusters}".replace("{clusters}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getIncidents:e=>s.request({method:"GET",path:"/1/incidents",queryParameters:{},headers:{}},e),getIndexingTime({clusters:e},r){if(!e)throw Error("Parameter `clusters` is required when calling `getIndexingTime`.");let t="/1/indexing/{clusters}".replace("{clusters}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getLatency({clusters:e},r){if(!e)throw Error("Parameter `clusters` is required when calling `getLatency`.");let t="/1/latency/{clusters}".replace("{clusters}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getMetrics({metric:e,period:r},t){if(!e)throw Error("Parameter `metric` is required when calling `getMetrics`.");if(!r)throw Error("Parameter `period` is required when calling `getMetrics`.");let a="/1/infrastructure/{metric}/period/{period}".replace("{metric}",encodeURIComponent(e)).replace("{period}",encodeURIComponent(r));return s.request({method:"GET",path:a,queryParameters:{},headers:{}},t)},getReachability({clusters:e},r){if(!e)throw Error("Parameter `clusters` is required when calling `getReachability`.");let t="/1/reachability/{clusters}/probes".replace("{clusters}",encodeURIComponent(e));return s.request({method:"GET",path:t,queryParameters:{},headers:{}},r)},getServers:e=>s.request({method:"GET",path:"/1/inventory/servers",queryParameters:{},headers:{}},e),getStatus:e=>s.request({method:"GET",path:"/1/status",queryParameters:{},headers:{}},e)}}({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${Z}-${e}`}),g()]}),...t})}var er="5.23.3";function et(e,r,t){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");return function({appId:e,apiKey:r,authMode:t,algoliaAgents:a,...i}){let o=P(e,r,t),s=C({hosts:[{url:`${e}-dsn.algolia.net`,accept:"read",protocol:"https"},{url:`${e}.algolia.net`,accept:"write",protocol:"https"}].concat(x([{url:`${e}-1.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-2.algolianet.com`,accept:"readWrite",protocol:"https"},{url:`${e}-3.algolianet.com`,accept:"readWrite",protocol:"https"}])),...i,algoliaAgent:w({algoliaAgents:a,client:"Recommend",version:er}),baseHeaders:{"content-type":"text/plain",...o.headers(),...i.baseHeaders},baseQueryParameters:{...o.queryParameters(),...i.baseQueryParameters}});return{transporter:s,appId:e,apiKey:r,clearCache:()=>Promise.all([s.requestsCache.clear(),s.responsesCache.clear()]).then(()=>void 0),get _ua(){return s.algoliaAgent.value},addAlgoliaAgent(e,r){s.algoliaAgent.add({segment:e,version:r})},setClientApiKey({apiKey:e}){t&&"WithinHeaders"!==t?s.baseQueryParameters["x-algolia-api-key"]=e:s.baseHeaders["x-algolia-api-key"]=e},batchRecommendRules({indexName:e,model:r,recommendRule:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `batchRecommendRules`.");if(!r)throw Error("Parameter `model` is required when calling `batchRecommendRules`.");let i="/1/indexes/{indexName}/{model}/recommend/rules/batch".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r));return s.request({method:"POST",path:i,queryParameters:{},headers:{},data:t||{}},a)},customDelete({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customDelete`.");let a="/{path}".replace("{path}",e);return s.request({method:"DELETE",path:a,queryParameters:r||{},headers:{}},t)},customGet({path:e,parameters:r},t){if(!e)throw Error("Parameter `path` is required when calling `customGet`.");let a="/{path}".replace("{path}",e);return s.request({method:"GET",path:a,queryParameters:r||{},headers:{}},t)},customPost({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPost`.");let i="/{path}".replace("{path}",e);return s.request({method:"POST",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},customPut({path:e,parameters:r,body:t},a){if(!e)throw Error("Parameter `path` is required when calling `customPut`.");let i="/{path}".replace("{path}",e);return s.request({method:"PUT",path:i,queryParameters:r||{},headers:{},data:t||{}},a)},deleteRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `deleteRecommendRule`.");if(!r)throw Error("Parameter `model` is required when calling `deleteRecommendRule`.");if(!t)throw Error("Parameter `objectID` is required when calling `deleteRecommendRule`.");let i="/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t));return s.request({method:"DELETE",path:i,queryParameters:{},headers:{}},a)},getRecommendRule({indexName:e,model:r,objectID:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `getRecommendRule`.");if(!r)throw Error("Parameter `model` is required when calling `getRecommendRule`.");if(!t)throw Error("Parameter `objectID` is required when calling `getRecommendRule`.");let i="/1/indexes/{indexName}/{model}/recommend/rules/{objectID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{objectID}",encodeURIComponent(t));return s.request({method:"GET",path:i,queryParameters:{},headers:{}},a)},getRecommendStatus({indexName:e,model:r,taskID:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `getRecommendStatus`.");if(!r)throw Error("Parameter `model` is required when calling `getRecommendStatus`.");if(!t)throw Error("Parameter `taskID` is required when calling `getRecommendStatus`.");let i="/1/indexes/{indexName}/{model}/task/{taskID}".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r)).replace("{taskID}",encodeURIComponent(t));return s.request({method:"GET",path:i,queryParameters:{},headers:{}},a)},getRecommendations(e,r){if(e&&Array.isArray(e)&&(e={requests:e}),!e)throw Error("Parameter `getRecommendationsParams` is required when calling `getRecommendations`.");if(!e.requests)throw Error("Parameter `getRecommendationsParams.requests` is required when calling `getRecommendations`.");let t={method:"POST",path:"/1/indexes/*/recommendations",queryParameters:{},headers:{},data:e,useReadTransporter:!0,cacheable:!0};return s.request(t,r)},searchRecommendRules({indexName:e,model:r,searchRecommendRulesParams:t},a){if(!e)throw Error("Parameter `indexName` is required when calling `searchRecommendRules`.");if(!r)throw Error("Parameter `model` is required when calling `searchRecommendRules`.");let i="/1/indexes/{indexName}/{model}/recommend/rules/search".replace("{indexName}",encodeURIComponent(e)).replace("{model}",encodeURIComponent(r));return s.request({method:"POST",path:i,queryParameters:{},headers:{},data:t||{},useReadTransporter:!0,cacheable:!0},a)}}}({appId:e,apiKey:r,timeouts:{connect:1e3,read:2e3,write:3e4},logger:f(),requester:c(),algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:g(),requestsCache:g({serializable:!1}),hostsCache:p({caches:[m({key:`${er}-${e}`}),g()]}),...t})}var ea=Object.defineProperty,ei=Object.getOwnPropertyDescriptor,eo=Object.getOwnPropertyNames,es=Object.prototype.hasOwnProperty,en=(e,r)=>{for(var t in r)ea(e,t,{get:r[t],enumerable:!0})},ed=(e,r,t,a)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let i of eo(r))es.call(e,i)||i===t||ea(e,i,{get:()=>r[i],enumerable:!(a=ei(r,i))||a.enumerable});return e},el=(e,r,t)=>(ed(e,r,"default"),t&&ed(t,r,"default")),eu={};en(eu,{algoliasearch:()=>ec,apiClientVersion:()=>V});var eh={};function ec(e,r,t){if(!e||"string"!=typeof e)throw Error("`appId` is missing.");if(!r||"string"!=typeof r)throw Error("`apiKey` is missing.");let a=z(e,r,t);return{...a,get _ua(){return a.transporter.algoliaAgent.value},initAbtesting:t=>U(t.appId||e,t.apiKey||r,t.region,t.options),initAnalytics:t=>O(t.appId||e,t.apiKey||r,t.region,t.options),initIngestion:t=>Y(t.appId||e,t.apiKey||r,t.region,t.options),initInsights:t=>K(t.appId||e,t.apiKey||r,t.region,t.options),initMonitoring:(t={})=>ee(t.appId||e,t.apiKey||r,t.options),initPersonalization:t=>H(t.appId||e,t.apiKey||r,t.region,t.options),initQuerySuggestions:t=>L(t.appId||e,t.apiKey||r,t.region,t.options),initRecommend:(t={})=>et(t.appId||e,t.apiKey||r,t.options)}}en(eh,{apiClientVersion:()=>V}),el(eh,a),el(eh,i),el(eh,o),el(eh,s),el(eh,n),el(eh,d),el(eh,l),el(eh,u),el(eh,h),el(eu,eh)}}]);